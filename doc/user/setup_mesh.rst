***************
Simulation mesh
***************

Waiwera uses a :ref:`finite_volume_discretisation` of the simulation domain to solve the mass and energy conservation equations within it. Such as discretisation strictly requires only the specification of the grid cell volumes, together with the areas of the mesh faces and their distances to the centres of the cells on either side.

However, Waiwera requires a full *geometric mesh* to be given for the simulation, with specification of the positions of all the cell vertices, and definition of the vertex list for each cell. This is exactly the same kind of mesh definition used for e.g. finite element models. The finite volume discretisation is generated internally by Waiwera from the geometric mesh. In practice it is often more convenient to generate a geometric mesh than a pure finite volume discretisation. A geometric mesh is also necessary for post-processing of simulation results.

Mesh formats
============

The simulation mesh is not stored in the main Waiwera JSON input file. Instead, it is stored in an auxiliary file. The JSON input file only specifies the location of this auxiliary mesh file.

Mesh handling in Waiwera makes use of the `PETSc <https://www.mcs.anl.gov/petsc/>`_ library -- more specifically, it uses PETSc's *DMPlex* unstructured mesh functionality. As a result, Waiwera meshes may be stored in any of the file formats supported by DMPlex. Currently these formats include:

* ExodusII [ScYa95]_
* `GMSH <http://gmsh.info/>`_
* Salome `MED <http://www.salome-platform.org/user-section/about/med>`_

.. [ScYa95] Schoof, L.A. and Yarberry, V.R. (1995). "ExodusII: a finite element data model". Technical Report SAND92-2137, Sandia National Laboratories, Albuquerque, New Mexico, USA.

Meshes in these formats may be generated by a variety of stand-alone mesh generation software packages, e.g. `CUBIT <https://cubit.sandia.gov/>`_ or `GMSH <http://gmsh.info/>`_. It is also possible to convert between a variety of mesh formats (including ExodusII, GMSH, Salome MED and VTK) using the `meshio <https://pypi.org/project/meshio/>`_ Python library.

Alternatively, meshes may be imported from TOUGH2 models (see :ref:`importing`).

Mesh orthogonality
==================


.. mesh orthogonality
.. mesh partitioning (parallel execution)
.. cell indexing (ref for bcs, incons, rock types etc.)

.. filename
.. 2D and radial models (radial, thickness)
.. zones
.. minc
.. assigning permeabilities to faces - by default direction, permeability angle, overriding (faces) - this should perhaps be in the rock section
